#!/usr/bin/env python3
import os
import sys
import subprocess
import re
import json

json_zfs = {
	"zfs_installed": False
}

def get_zpool_data():
	try:
		zfs_list_result = subprocess.Popen(
			["zfs","list"],stdout=subprocess.PIPE, universal_newlines=True).stdout
	except:
		return False

	zpools = []
	for line in zfs_list_result:
		regex = re.search("^(\S+)\s+(\S+)\s+(\S+)\s+\S+\s+(\S+).*$",line)
		if regex != None and regex.group(1) != "NAME":
			zpools.append(
					{
						"name":regex.group(1),
						"used":regex.group(2),
						"avail":regex.group(3),
						"mountpoint":regex.group(4)
					}
				)
	return zpools

def get_zpool_status():
	for pool in json_zfs["zpools"]:
		try:
			zpool_status_result = subprocess.Popen(
				["zpool","status",pool["name"]],stdout=subprocess.PIPE, universal_newlines=True).stdout
		except:
			return False
	# EXAMPLE COMMAND: zpool status tank1
	#  pool: tank1
	# state: ONLINE
	#  scan: none requested
	#config:
	#
	#        NAME        STATE     READ WRITE CKSUM
	#        tank1       ONLINE       0     0     0
	#          raidz1-0  ONLINE       0     0     0
	#            1-15    ONLINE       0     0     0
	#            1-14    ONLINE       0     0     0
	#            1-12    ONLINE       0     0     0
	#
	#errors: No known data errors
	
	# TODO: Parse this next week. 


	

def check_zfs():
	try:
		command_result = subprocess.run(["command -v zsh"],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL,shell=True).returncode
	except:
		return False
	return (command_result == 0)

def main():
	if check_zfs():
		json_zfs["zfs_installed"] = True
		json_zfs["zpools"] = get_zpool_data()

	print(json.dumps(json_zfs,indent=4))

if __name__ == "__main__":
    main()