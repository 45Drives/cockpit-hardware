#!/usr/bin/env python3
################################################################################
# motherboard:
# 	used to return information about the motherboard in a .json
#   format. This is a helper sctipt for use with the
#   cockpit-hardware package (https://github.com/45Drives/cockpit-hardware)
#
# Copyright (C) 2020, Mark Hooper   <mhooper@45drives.com>
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#   
################################################################################

import re
import subprocess
import os
import sys
import json
from pprint import pprint


# supported motherboard manufacturers and models can be adjusted here
g_dmi_mobo_fields = {
	"Manufacturer":  ["Supermicro"],
	"Product Name":  ["X11DPL-i"],
	"Serial Number": None
}

#supported CPU types
g_dmi_cpu_fields = {
	"Socket Designation":  ["CPU1","CPU2"],
	"Version":  ["Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz"],
	"Current Speed": None,
	"Max Speed": None,
}

g_ipmitool_sensor_fields = {
	"CPU1 Temp": "(C)",
	"CPU2 Temp": "(C)",
	"PW Consumption": "(W)",
	"FAN1": "(RPM)",
	"FAN2": "(RPM)",
	"FAN3": "(RPM)",
	"FAN4": "(RPM)",
	"FAN5": "(RPM)",
	"FAN6": "(RPM)",
	"FANA": "(RPM)",
	"FANB": "(RPM)"
}

g_ipmitool_fru_fields = {
	"Product Manufacturer": ["45Drives"],
	"Product Name": ["Storinator","Destroyinator"],
	"Product Part Number":["AV15","Q30","q30","av15","s45","S45","XL60","xl60"],
	"Product Serial":None
}

g_storcli64_fields = {
	"SAS9305-16i":None,
	"SAS9305-24i":None
}

################################################################################
# Name: get_motherboard_model
# Args: None
# Desc: This runs "dmidecode -t 2" and parses the output for specific fields
#       corresponding to the keys in g_dmi_mobo_fields dictionary.
#       if dmidecode discovers an unsupported motherboard model, or 
#		manufacturer, it will append " (unsupported)"  to the end of the 
#       result.  
################################################################################
def get_motherboard_model():
	mobo = []
	try:
		dmi_result = subprocess.Popen(["dmidecode","-t","2"],stdout=subprocess.PIPE,universal_newlines=True).stdout
	except:
		#print("ERROR: dmidecode is not installed")
		return False
	for line in dmi_result:
		for field in g_dmi_mobo_fields.keys():
			regex = re.search("^\s({fld}):\s+(.*)".format(fld=field),line)
			if regex != None:
				if g_dmi_mobo_fields[regex.group(1)] != None:
					if regex.group(2) in g_dmi_mobo_fields[regex.group(1)]:
						mobo.append((regex.group(1),regex.group(2)))
					else:
						mobo.append((regex.group(1),regex.group(2)+" (unsupported)"))
				else:
					mobo.append((regex.group(1),regex.group(2)))
	mobo_json_str = "{\"Motherboard\":["+json.dumps(dict(mobo))+"]}"
	return mobo_json_str


def get_cpu_info():
	cpu = []
	try:
		dmi_result = subprocess.Popen(["dmidecode","-t","4"],stdout=subprocess.PIPE,universal_newlines=True).stdout
	except:
		#print("ERROR: dmidecode is not installed")
		return False
	for line in dmi_result:
		for field in g_dmi_cpu_fields.keys():
			regex = re.search("^\s({fld}):\s+(.*)".format(fld=field),line)
			if regex != None:
				if g_dmi_cpu_fields[regex.group(1)] != None:
					if regex.group(2) in g_dmi_cpu_fields[regex.group(1)]:
						cpu.append((regex.group(1),regex.group(2)))
					else:
						cpu.append((regex.group(1),regex.group(2)+" (unsupported)"))
				else:
					cpu.append((regex.group(1),regex.group(2)))

	if len(cpu) == len(g_dmi_cpu_fields):
		#there is only 1 cpu listed
		cpu_json_str = "{\"CPU\":["+json.dumps(dict(cpu))+"]}"
	else:
		#system has 2 CPUs, but duplicate keys if used as dict
		cpu_json_str = (
			"{\"CPU\":[" +
			json.dumps(dict(cpu[0:(len(g_dmi_cpu_fields)-1)])) + 
			"," +
			json.dumps(dict(cpu[len(g_dmi_cpu_fields):-1])) +
			"]}"
		)
	return cpu_json_str



def get_sensor_readings():
	try:
		ipmitool_sensor_result = subprocess.Popen(
			["ipmitool","sensor"],stdout=subprocess.PIPE,universal_newlines=True).stdout
	except:
		#print("ERROR: ipmitool is not installed")
		return False

	sensor_readings = []
	for line in ipmitool_sensor_result:
		for field in g_ipmitool_sensor_fields.keys():
			regex = re.search("^({fld})\s+\|\s+(\S+).*".format(fld=field),line)
			if regex != None:
				if regex.group(2) != "na":
					sensor_readings.append(
						(regex.group(1),regex.group(2)+g_ipmitool_sensor_fields[regex.group(1)])
					)
	sensor_readings_json_str = "{\"Sensor Readings\":["+json.dumps(dict(sensor_readings))+"]}"
	return sensor_readings_json_str

def get_system_info():
	try:
		ipmitool_fru_result = subprocess.Popen(
			["ipmitool","fru"],stdout=subprocess.PIPE,universal_newlines=True).stdout
	except:
		#print("ERROR: ipmitool is not installed")
		return False
	system = []
	for line in ipmitool_fru_result:
		for field in g_ipmitool_fru_fields.keys():
			regex = re.search("^\s({fld})\s+:\s+(.*)".format(fld=field),line)
			if regex != None:
				if g_ipmitool_fru_fields[regex.group(1)] != None:
					if regex.group(2) in g_ipmitool_fru_fields[regex.group(1)]:
						system.append((regex.group(1),regex.group(2)))
					else:
						system.append((regex.group(1),regex.group(2)+" (unknown)"))
				else:
					system.append((regex.group(1),regex.group(2)))
	system_json_str = "{\"System Information\":["+json.dumps(dict(system))+"]}"
	return system_json_str

def get_hba_info():
	try:
		storcli64_result = subprocess.Popen(
			["/opt/tools/storcli64","show","all"],stdout=subprocess.PIPE,universal_newlines=True)
	except:
		return False
	hba_json_str = "{\"HBA Cards\":["
	card_count = 0
	for line in storcli64_result.stdout:
		for field in g_storcli64_fields.keys():
			# Model AdapterType VendId DevId SubVendId SubDevId PCIAddress 	
			regex = re.search("({fld}).*(00:\w\w:\w\w:\w\w)\s+$".format(fld=field),line)
			if regex != None:
				hba_json_str += (
					"{\"Model\":\"" + 
					regex.group(1) + 
					"\",\"PCI Address\":\"" + 
					regex.group(2) +
					"\"},"
				)
	hba_json_str = hba_json_str[:-1]
	hba_json_str += "]}"
	return hba_json_str


# TODO: the -j option isn't working on centOS7, re-write this.				
def get_lan_info():
	try:
		ipaddr_result = subprocess.Popen(
			["ip","-j","addr"],stdout=subprocess.PIPE, universal_newlines=True).stdout
	except:
		return False
	lan_json_dict_lst = json.loads(ipaddr_result.read())
	lan_json_str = "{\"Lan Information\":["
	for entry in lan_json_dict_lst:
		lan_json_str += (
			"{" + 
			"\"ifname\":" + "\"" + entry["ifname"] + "\"," +
			"\"operstate\":" + "\"" + entry["operstate"] + "\"," +
			"\"link_type\":" + "\"" + entry["link_type"] + "\"," +
			"\"mac_address\":" + "\"" + entry["address"] + "\"," +
			"\"addr_info\": ["
			)
		if len(entry["addr_info"]) > 0:  
			for i in entry["addr_info"]:
				lan_json_str += (
					"{"
					"\"family\":" + "\"" + i["family"] + "\","
					"\"local\":" + "\"" + i["local"] + "\"" +
					"},"
				)
			lan_json_str = lan_json_str[:-1]
		lan_json_str += "]},"
	lan_json_str = lan_json_str[:-1]
	lan_json_str += "]}"
	return lan_json_str

def get_product_info(mobo,hba,cpu,system):
	MANUAL_CHECK = True
	if mobo and hba and cpu:
		jmobo = json.loads(mobo)
		jhba = json.loads(hba)
		jcpu = json.loads(cpu)
	else:
		return False

	if system:
		jsystem = json.loads(system)
		MANUAL_CHECK = False
		
	# A Look up table for determining the product.
	# List entries correspond as follows
	# [Motherboard Model, CPU, CPU Count, 24-i count, 16-i count, chassis size, SSD Check Flag]
	# Note!! SSD Check flag assumes that we are unable to reliably determine
	#        chassis size. So this flag will be used to determine if we need
	#        to querey the connected drives to determine if we have more SSDs or HDDs
	#        to address the discrepancy 

	#TODO: PEFORM THE (dmidecode -t 2) AND (dmidecode -t 1) ON THE FOLLOWING MOTHERBOARDS
	#      AND UPDATE THIS TABLE!:
	#			H11SSL-i, X11SPL-F, X11SSH-CTF, X11SSM-F

	product_lut_idx = {
		"MOBO_MODEL":	0,
		"CPU": 			1,
		"CPU_COUNT":	2,
		"24I_COUNT":	3,
		"16I_COUNT":	4,
		"CHASSIS_SIZE": 5,
		"SSD_CHECK":	6
	}

	product_lut = {
		"Storinator-H16 Q30 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,1,1,"Q30",False],
		"Storinator-H16 S45 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,1,2,"S45",False],
		"Storinator-H16 XL60 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,1,3,"XL60",False],
		"Storinator-H32 Q30 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,2,0,"Q30",False],
		"Storinator-H32 S45 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,2,1,"S45",False],
		"Storinator-H32 XL60 Enhanced":	["H11SSL-i","AMD EPYC 7281",1,2,2,"XL60",False],

		"Storinator AV15 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,0,1,"AV15",False],
		"Storinator Q30 Turbo":			["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,0,2,"Q30",True],
		"Storinator S45 Turbo":			["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,0,3,"S45",False],
		"Storinator XL60 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,0,4,"XL60",False],
		"Stornado AV15 Turbo":			["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,0,2,"AV15",True],
		"Storinator-H16 Q30 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,1,1,"Q30",False],
		"Storinator-H16 S45 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,1,2,"S45",False],
		"Storinator-H16 XL60 Turbo":	["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,1,3,"XL60",False],
		"Storinator-H32 Q30 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,2,0,"Q30",False],
		"Storinator-H32 S45 Turbo":		["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,2,1,"S45",False],
		"Storinator-H32 XL60 Turbo":	["X11DPL-i","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",2,2,2,"XL60",False],

		"Storinator AV15 Enhanced":		["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,0,1,"AV15",False],
		"Storinator Q30 Enhanced":		["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,0,2,"Q30",False],
		"Storinator S45 Enhanced":		["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,0,3,"S45",False],
		"Storinator XL60 Enhanced":		["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,0,4,"XL60",False],
		"Stornado AV15 Enhanced":		["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,0,2,"AV15",False],
		"Storinator-H16 Q30 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,1,1,"Q30",False],
		"Storinator-H16 S45 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,1,2,"S45",False],
		"Storinator-H16 XL60 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,1,3,"XL60",False],
		"Storinator-H32 Q30 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,2,0,"Q30",False],
		"Storinator-H32 S45 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,2,1,"S45",False],
		"Storinator-H32 XL60 Enhanced":	["X11SPL-F","Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz",1,2,2,"XL60",False],

		"Storinator AV15 Base":			["X11SSH-CTF","Intel Xeon E3-1220",1,0,0,"AV15",False],
		"Storinator Q30 Base":			["X11SSH-CTF","Intel Xeon E3-1220",1,0,2,"Q30",False],

		"Storinator S45 Base":			["X11SSM-F","Intel Xeon E3-1220",1,0,3,"S45",False]
	}

	mobo_to_product_lut = {
		"X11SSH-CTF"	:[
							"Storinator-H32 XL60 Enhanced",
							"Storinator AV15 Base"
						],
		
		"X11SPL-F"		:[
							"Storinator AV15 Enhanced",
							"Storinator Q30 Enhanced",
							"Storinator S45 Enhanced",
							"Storinator XL60 Enhanced",
							"Stornado AV15 Enhanced",
							"Storinator-H16 Q30 Enhanced",					
							"Storinator-H16 S45 Enhanced",
							"Storinator-H16 XL60 Enhanced",
							"Storinator-H32 Q30 Enhanced",
							"Storinator-H32 S45 Enhanced",
							"Storinator-H32 XL60 Enhanced"	
						],
		
		"X11DPL-i"		:[
							"Storinator AV15 Turbo",
							"Storinator Q30 Turbo",	
							"Storinator S45 Turbo",		
							"Storinator XL60 Turbo",	
							"Stornado AV15 Turbo",	
							"Storinator-H16 Q30 Turbo",	
							"Storinator-H16 S45 Turbo",	
							"Storinator-H16 XL60 Turbo",
							"Storinator-H32 Q30 Turbo",	
							"Storinator-H32 S45 Turbo",	
							"Storinator-H32 XL60 Turbo"
						],
		
		"X11SSM-F"		:[
							"Storinator S45 Base"
						],

		"H11SSL-i"		:[
							"Storinator-H16 Q30 Enhanced",
							"Storinator-H16 S45 Enhanced",	
							"Storinator-H16 XL60 Enhanced",
							"Storinator-H32 Q30 Enhanced",	
							"Storinator-H32 S45 Enhanced",	
							"Storinator-H32 XL60 Enhanced"
						]
	}

	cpu_count = len(jcpu["CPU"])
	mobo_model = jmobo["Motherboard"][0]["Product Name"]
	chassis_size = "N/A"
	hba_24i_count = 0
	hba_16i_count = 0

	for hba in jhba["HBA Cards"]:
		if hba["Model"] == "SAS9305-16i":
			hba_16i_count += 1
		elif hba["Model"] == "SAS9305-24i":
			hba_24i_count += 1

	if system:
		chassis_size = jsystem["System Information"][0]["Product Part Number"]

	product_json_str = None

	for product in mobo_to_product_lut[mobo_model]:
		if system:
			if (
				product_lut[product][product_lut_idx["MOBO_MODEL"]] == mobo_model and
				product_lut[product][product_lut_idx["CHASSIS_SIZE"]] == chassis_size and
				product_lut[product][product_lut_idx["CPU_COUNT"]] == cpu_count and
				product_lut[product][product_lut_idx["24I_COUNT"]] == hba_24i_count and
				product_lut[product][product_lut_idx["16I_COUNT"]] == hba_16i_count
				):
				return ("{\"Product Info\": \"" + product + "\"}")
		elif (
			product_lut[product][product_lut_idx["SSD_CHECK"]] == False and
			product_lut[product][product_lut_idx["MOBO_MODEL"]] == mobo_model and
			product_lut[product][product_lut_idx["CPU_COUNT"]] == cpu_count and
			product_lut[product][product_lut_idx["24I_COUNT"]] == hba_24i_count and
			product_lut[product][product_lut_idx["16I_COUNT"]] == hba_16i_count 
			):
				#there is a unique pairing of parameters without having 
				#to check for hdd or ssd count
				#TODO: write a function that will perform the required modifications using ipmitool 
				return ("{\"Product Info\": \"" + product + "\"}")
		else:
			#TODO: use rotational to detect if there are more HDDs or SSDs
			#TODO: call the same function to modify the ipmitool entries
			return False

def main():
	mobo = get_motherboard_model()
	cpu = get_cpu_info()
	sensor_readings = get_sensor_readings()
	system = get_system_info()
	hba = get_hba_info()
	lan = get_lan_info()
	product = get_product_info(mobo,hba,cpu,system)
	
	if mobo:
		print(mobo,",")
	if cpu:
		print(cpu,",")
	if sensor_readings:
		print(sensor_readings,",")
	if system:
		print(system,",")
	if hba:
		print(hba,",")
	if lan:
		print(lan,",")
	if product:
		print(product)

if __name__ == "__main__":
    main()